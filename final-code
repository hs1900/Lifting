%Henry Shao, Eric Wu
%Spring 2017
%% LIFTING
clear;clc;close all;

% Create a video object to write to
GMM = 'GMMgood.avi';
Obj = VideoWriter(GMM);
writerObj.FrameRate = 30;
open(Obj);

% Create a video object to process on
vidIn = 'badformshade.m4v';
vidObj = VideoReader(vidIn); 
nFrames = vidObj.NumberOfFrames;
vidHeight = vidObj.Height; 
vidWidth = vidObj.Width;

% Train frames for background
foregroundDetector = vision.ForegroundDetector('NumGaussians', 3,...
    'NumTrainingFrames', 130,'LearningRate',.0001);

% Complete background subtraction and write video
videoReader = vision.VideoFileReader(vidIn);

% Morphological parameter
seOpen = strel('square', 12);
%  seClose = strel('square', 1);

BBox = zeros(nFrames,4);

for i = 1:nFrames
    frame = read(vidObj,i);
    foreground = step(foregroundDetector, frame);        
    IMopen = imopen(foreground,seOpen);
%   IMclose = imclose(foreground,seClose);   

% Blob Bnalysis to Obtain Boundary
    blobAnalysis = vision.BlobAnalysis('BoundingBoxOutputPort', true, ...
        'AreaOutputPort', false, 'CentroidOutputPort', false, ...
        'MinimumBlobArea', 4000);
    bbox = step(blobAnalysis, IMopen);
    
% If there are multiple bounding boxes
    index = find(max(bbox(:,3) .*bbox(:,4)));
    if size(bbox) > [0 3]
        BBox(i,:) = bbox(index,:);
    end
    
% Can Insert Box for Visual Confirmation
%     result = insertShape( 255*uint8(IMopen), 'Rectangle', BBox(i,:), 'Color', 'green');
%     IMopen = result;

    writeVideo(Obj,255*uint8(IMopen));
end

close(Obj);

%% Matching Lower Back
close all;

% Set range and analyze
begcutoff= floor(nFrames*(1/3)); %processing only part of the video, this number can be changed
endcutoff = floor(nFrames*(4/5));

bendingBBox = BBox(begcutoff:endcutoff,3); %locating the bbox with largest width
standingBBox = BBox(begcutoff:endcutoff,4); % locating the bbox with largest height

tempmaxH = find(standingBBox == max(standingBBox),1);
standingFrameLoc = tempmaxH + begcutoff -1; %frame location where person is standing

 % Locate Butt
tempmaxW = find(bendingBBox == max(bendingBBox),1);
bendingFrameLoc = tempmaxW+begcutoff-1; %frame location where person is bending
vidObj2 = VideoReader(GMM); 

bendingFrameLoc = bendingFrameLoc(1,:);
BendingFrame = (read(vidObj2,bendingFrameLoc));
%imshow(uint8(EndFrame));

BendingFrameBBox = BBox(bendingFrameLoc,:);

%location of right most point of bounding box with person bending down
buttCol = BendingFrameBBox(1)+BendingFrameBBox(3)-1; 
buttRow = find(BendingFrame(:,buttCol) > 50,1);

buttCoordsTemp = zeros(nFrames,2);

% Create template around lower back
buttFrame = rgb2gray(read(vidObj,bendingFrameLoc));

%dimensions for the template - first hardcoded the size of the box for our image
buttTempColStart = round(BendingFrameBBox(3)*(1/3)); 
buttTempColEnd = round(BendingFrameBBox(3)*(1/10));
buttTempRowStart = round(BendingFrameBBox(4)*(3/5));

buttCoordsTemp(bendingFrameLoc,1) = buttCol-buttTempColStart;
buttCoordsTemp(bendingFrameLoc,2) = buttRow-buttTempRowStart;

% Create New Template for Back
backTemp = buttFrame(buttRow-buttTempRowStart:buttRow, ...
           buttCol-buttTempColStart:buttCol+buttTempColEnd);

%% Pinpointing lowerback as point of interest

% After obtaining the locations for the back template, we find the rightmost point in each frame
buttObj = VideoReader(GMM);
buttPOI = zeros(nFrames,2);

for m = begcutoff:endcutoff
    frame = read(buttObj,m);
    bFrame = frame(buttRow-40:buttRow+20,buttCol-60:buttCol);
    
    binaryMatrix = bFrame > 200;
    %imshow(binaryMatrix);
    if sum(binaryMatrix)==0
        binCol = 0;
        binRow = buttTempRowStart+1;
    else 
      [sel c] = max(binaryMatrix ~= 0, [], 1);
      binLoc = sel.*c;
      binCol = max(find(binLoc));
      binRow = min(find(binaryMatrix(:,binCol)));
    end
    
    buttPOI(m,1) = binCol+buttCol-60;
    buttPOI(m,2) = binRow+buttRow-40;
end
%% Find standing frame

% Set range and analyze
tempboxH = BBox(begcutoff:endcutoff,4);

% Locate neck
tempmax = find(tempboxH == max(tempboxH),1);
standingFrameLoc = tempmax+begcutoff-1;
vidObj2 = VideoReader(GMM);

standingFrameLoc = standingFrameLoc(1,:);
EndFrame = (read(vidObj2,standingFrameLoc));

%% Testing Curvatures
clc;close all;

% Create object from GMM video
GMMObj = VideoReader(GMM); 
fontSize = 20;

% Obtain standing frame
testFrame = rgb2gray(read(GMMObj,standingFrameLoc));
bwFrame = bwboundaries(testFrame);

% Obtain the boundary points 
BW = testFrame > 128;
[B,L] = bwboundaries(BW,'noholes');
figure;
imshow(label2rgb(L, @jet, [.5 .5 .5]))
hold on;

Bcell = size(B{1},1);
k=1;
for i = 2:size(B,1)
    if size(B{i},1) > Bcell
        k = i;
    end
end

boundary = B{k};
plot(boundary(1:floor(length(boundary)),2), ...
boundary(1:floor(length(boundary)),1), 'r', 'LineWidth', 2)

% Find radius and curvatures
numberOfPoints = length(boundary);
curvature = zeros(1, numberOfPoints);
for t = 1 : numberOfPoints
	if t == 1
		index1 = numberOfPoints;
		index2 = t;
		index3 = t + 1;
    elseif t >= numberOfPoints
		index1 = t-1;
		index2 = t;
		index3 = 1;
	else
		index1 = t-1;
		index2 = t;
		index3 = t + 1;
    end
    % Obtain points for curvature
	x1 = boundary(index1,2);
	y1 = boundary(index1,1);
	x2 = boundary(index2,2);
	y2 = boundary(index2,1);
	x3 = boundary(index3,2);
	y3 = boundary(index3,1);
    
    % Apply curavture equation
	curvature(t) = 2*abs((x2-x1).*(y3-y1)-(x3-x1).*(y2-y1)) ./ ...
	sqrt(((x2-x1).^2+(y2-y1).^2)*((x3-x1).^2+(y3-y1).^2)*((x3-x2).^2+(y3-y2).^2));
end

% Set threshold to obtain points of interest
threshold = 1;
cur = curvature > threshold;
Candidates = cur .*curvature;

indexCurv = find(Candidates);
pointCand = boundary(indexCurv,:);
plot(pointCand(:,2),pointCand(:,1),'x','MarkerSize' ,20);
% 2 = x, 1 = y

% Plot curvature.
figure;plot(curvature, 'b-', 'LineWidth', 1)
grid on;
xlim([1 numberOfPoints]); % Set limits for the x axis.
title('Radius of Curvature', 'FontSize', fontSize);

neckcutoff = BBox(standingFrameLoc,2)+(BBox(standingFrameLoc,4)/2);
%% HOG 
close all;

hogFrame = rgb2gray(read(vidObj,standingFrameLoc));
% figure;
% imshow(hogFrame);

% Unique feature vector of a block of the back
tempFeature = [0.14943308,0.36169705,0.25075939,0.10627335,0.038552579,0.020293027,0.017680168,0.031107783,0.045924269,0.10839719,0.10950667,0.073320597,0.038361929,0.057253391,0.028863683,0.015057934,0.029198637,0.076166198,0.38888010,0.38888010,0.17983225,0.031269766,0.011060436,0.010597482,0.0068135709,0.024044484,0.13070711,0.38888010,0.38888010,0.15366217,0.11201661,0.037162151,0.048065886,0.012115389,0.070827842,0.15689355,0.14910607,0.12638235,0.084377281,0.048281077,0.089181729,0.052441228,0.038342498,0.044972960,0.10854328,0.14321536,0.082613200,0.041862521,0.023397146,0.057893973,0.037654247,0.058324602,0.047412764,0.12011989,0.39485797,0.39485797,0.23642258,0.17926225,0.073651075,0.081411608,0.031588700,0.13307749,0.23843592,0.39485797,0.39485797,0.074165240,0.050682995,0.049238179,0.032636046,0.045286119,0.075887248,0.23069611,0.20585197,0.096935771,0.047524355,0.019010043,0.051262766,0.027855435,0.063082740,0.094617642,0.21524976,0.31529686,0.15799221,0.094012402,0.15282197,0.11081563,0.036965009,0.050108742,0.23492187,0.31529686,0.31529686,0.31529686,0.071127214,0.056293570,0.056044966,0.036008190,0.049014103,0.094371997,0.31386727,0.31529686,0.12991585,0.030254848,0.029318158,0.035860043,0.032758929,0.031619947,0.11605231,0.31529686,0.36806637,0.36806637,0.10393218,0.022060679,0.016141836,0.016146349,0.0049375664,0.018425619,0.11584447,0.36806637,0.36806637,0.14194837,0.15852198,0.11577772,0.13103870,0.012846406,0.084531397,0.13936672,0.035547670,0.036354057,0.015114535,0.025208611,0.080722235,0.039258882,0.013552477,0.013123359,0.023511097,0.10641160,0.092846639,0.064116947,0.13741675,0.36806637,0.36806637,0.015502543,0.045484047,0.036307108,0.31926590,0.31926590,0.14909510,0.16354160,0.12500131,0.12777841,0.013808588,0.096546806,0.14272234,0.31926590,0.31926590,0.054261211,0.041427381,0.030221775,0.015753925,0.013934117,0.047114827,0.19007556,0.15505035,0.12753296,0.072216317,0.14647682,0.31926590,0.31926590,0.016392559,0.049159531,0.046410769,0.31926590,0.18413204,0.048270155,0.058219813,0.074987188,0.034978881,0.012720381,0.026296061,0.11032271,0.35365033,0.32208440,0.047489420,0.040823381,0.028651781,0.019586258,0.016452348,0.053271711,0.26746410,0.35365033,0.10534272,0.016718592,0.017532174,0.019742755,0.018552095,0.018553814,0.064658739,0.33028439,0.35365033,0.19638878,0.048819929,0.055787046,0.052172348,0.028992325,0.018042944,0.029583959,0.17179762,0.35365033,0.075542472,0.011751402,0.017403416,0.024821388,0.018260770,0.025946543,0.029918479,0.32121152,0.020588618,0.022616778,0.030839132,0.040676985,0.22837965,0.083177097,0.033405311,0.022887878,0.029162398,0.019415017,0.018181225,0.067157619,0.15243405,0.44996640,0.44996640,0.022724397,0.029500235,0.045949489,0.025684932,0.022678502,0.037644044,0.024567412,0.29254043,0.064590171,0.027854085,0.017048258,0.026500123,0.028675457,0.012724980,0.021869488,0.046659309,0.44996640,0.44226548,0.018247571,0.019989045,0.029074052,0.033297684,0.032138988,0.079422146,0.17833909,0.45059204,0.45059204,0.027751902,0.037282124,0.057303071,0.14285722,0.080769897,0.090244830,0.11242373,0.17482086,0.089956686,0.033877548,0.050902959,0.11090814,0.036577009,0.017142270,0.025196115,0.046669576,0.45059204,0.45059204,0.026530119,0.030818144,0.038319372,0.061776359,0.063190952,0.061805036,0.039600924,0.090741813,0.054123912,0.038242910,0.066953801,0.043433707,0.37359884,0.17732963,0.17195454,0.19704777,0.23544154,0.13622662,0.081974372,0.11443925,0.30518234,0.37359884,0.12787466,0.048876163,0.063260853,0.12958607,0.093899794,0.10971537,0.079432182,0.37359884,0.11363317,0.13596140,0.13489829,0.098220728,0.17542428,0.11172237,0.078986697,0.13289388,0.071768545,0.11223330,0.051333051,0.058009341,0.097753510,0.20012201,0.12205683,0.055816278,0.038755201,0.092313975];

% Find the block that has the closest HOG features to the template
ihogCand = vidHeight * vidWidth;
for i = 1:size(pointCand,1)
    if pointCand(i,1) < neckcutoff
        
        if pointCand(i,1)>16 && pointCand(i,2)>16
        testTemp = hogFrame(pointCand(i,1)-16:pointCand(i,1)+16,...
            pointCand(i,2)-16:pointCand(i,2)+16);
        testFeature = extractHOGFeatures(testTemp);
        hogCand = mean(abs(testFeature - tempFeature));
        end
        
        if hogCand < ihogCand
            ihogCand = hogCand;
            hogLoc = i;
        
        end
    end
end
% Create the matching template
testTemp = hogFrame(pointCand(hogLoc,1)-16:pointCand(hogLoc,1)+16,...
        pointCand(hogLoc,2)-16:pointCand(hogLoc,2)+16);
 
% Display matching block and show rose plots
imshow(testTemp);
[testFeature,testVisualization] = extractHOGFeatures(testTemp);hold on
plot(testVisualization);

%% Template match around neck area
close all;

% Set template paramaters
neckRow = pointCand(hogLoc,1);
neckCol = pointCand(hogLoc,2);
neckTemp = hogFrame(neckRow-40:neckRow+60,neckCol-50:neckCol+30);

neckCoords = zeros(nFrames,2);
neckCoords(standingFrameLoc,1) = pointCand(hogLoc,1);
neckCoords(standingFrameLoc,2) = pointCand(hogLoc,2);

% Matching backwards
for m = standingFrameLoc-1:-1:begcutoff
    prevFrame = rgb2gray(read(vidObj,m));
    [dx, dy, matchblock] = templatematching(neckTemp,prevFrame,neckCol-50,neckRow-40,1);
    
    neckTemp = matchblock;
    %imshow(uint8(matchblock));
    neckRow = neckRow + dy;
    neckCol = neckCol + dx;
    
    neckCoords(m,1) = neckRow - 40;
    neckCoords(m,2) = neckCol - 50;
    
end
%% Matching forwards
close all;

neckRow = pointCand(hogLoc,1);
neckCol = pointCand(hogLoc,2);
neckTemp = hogFrame(neckRow-40:neckRow+60,neckCol-50:neckCol+30);

for m = standingFrameLoc+1:endcutoff
    nextFrame = rgb2gray(read(vidObj,m));
    [dx, dy, matchblock] = templatematching(neckTemp,nextFrame,neckCol-50,neckRow-40,1);

    neckTemp = matchblock;
    %imshow(uint8(matchblock));
    
    neckRow = neckRow + dy;
    neckCol = neckCol + dx;
    
    neckCoords(m,1) = neckRow - 40;
    neckCoords(m,2) = neckCol - 50;
    
end

%% Pinpointing upperback as point of interest

buttObj = VideoReader(GMM);
backPOI = zeros(nFrames,2);

for m = begcutoff:endcutoff
    frame = read(buttObj,m);
    bFrame = frame(neckCoords(m,1):100+neckCoords(m,1),neckCoords(m,2):80+neckCoords(m,2));
    binaryMatrix = bFrame > 200;
    imshow(bFrame)
    if sum(binaryMatrix(1,:))~=0
        binCol = max(find(binaryMatrix(1,:)));
        binRow = 0;
    else
        binCol = 0;
        binRow = min(find(binaryMatrix(:,1)));
    end
       
    backPOI(m,1) = binRow+neckCoords(m,1);
    backPOI(m,2) = binCol+neckCoords(m,2);
end

%% Plotting Points and Scoring

close all;

% Create a video object to write to
Demo = 'Good-formDemo.avi';
FinObj = VideoWriter(Demo);
videoObj.FrameRate = 30;
open(FinObj);
figure;
% Initialize distance, area and warning counter
d = zeros(nFrames,3);
area = zeros(nFrames,1);
warningCount = 0;

% Loop through video
for i = begcutoff:nFrames
    
    % Obtain RGB and GMM versions of the frame
    finalFrame = read(vidObj,i) ;
    imshow(finalFrame); hold on
    boundFrame = rgb2gray(read(GMMObj,i));

    % Obtain boundary points of the frame
    BW = boundFrame > 128;
    Bound = bwboundaries(BW,'noholes');
  
    Bcell = size(Bound,1);
    boundaryPoints = Bound{1};
    
    if Bcell >1        
        for j = 2:Bcell
            boundaryPoints = [boundaryPoints;Bound{j}];
        end
    end
    
    % Plot the straight line
    plot([buttPOI(i,1) backPOI(i,2)],[buttPOI(i,2) backPOI(i,1)], 'r'); 
  
    % Obtain  interecting points btween the boundary and the points of interest
    yCordBack = [find(boundaryPoints(:,1) == backPOI(i,1)-1);
        find(boundaryPoints(:,1) == backPOI(i,1));
        find(boundaryPoints(:,1) == backPOI(i,1)+1)];
    xCordBack = [find(boundaryPoints(:,2) == backPOI(i,2)-1);
        find(boundaryPoints(:,2) == backPOI(i,2));
        find(boundaryPoints(:,2) == backPOI(i,2)+1)];   
    yCordButt = [find(boundaryPoints(:,1) == buttPOI(i,2)-1);
        find(boundaryPoints(:,1) == buttPOI(i,2));
        find(boundaryPoints(:,1) == buttPOI(i,2)+1)];
    xCordButt = [find(boundaryPoints(:,2) == buttPOI(i,1)-1);
        find(boundaryPoints(:,2) == buttPOI(i,1));
        find(boundaryPoints(:,2) == buttPOI(i,1)+1)];
    
    % Case if no points found
    if size(xCordButt) == [0 1]
        if i >= endcutoff
             % Display final score
            str = [num2str(score),'%'];
            mScore = uicontrol('style','text');       
            set(mScore,'Position', [70 100 100 30],'ForegroundColor','black', ...
                'FontSize', 24,'BackgroundColor','w');                     
            set(mScore,'String',str)
            demoFrames = getframe;
            writeVideo(FinObj, demoFrames);
            continue
        else
            demoFrames = getframe;
            writeVideo(FinObj, demoFrames);
        continue
        
        end
        
        X = [backPOI(i,2) backPOI(i,1);buttPOI(i,1) buttPOI(i,2)];
        d(i,1) = pdist(X,'euclidean');
        endLoop = floor(d(i,1));
        j2 = 1;
      
    else    
        % Determine the amount of boundary points to plot
        dif=repmat(yCordButt,1,length(xCordButt)) - repmat(xCordButt',length(yCordButt),1);
        [dis,imn]=min(abs(dif(:)));
        [j,n]=ind2sub(size(dif),imn);
        boundEnd = boundaryPoints(yCordButt(j),:);

        dif2=repmat(yCordBack,1,length(xCordBack)) - repmat(xCordBack',length(yCordBack),1);
        [dis2,imn2]=min(abs(dif2(:)));
        [j2,n2]=ind2sub(size(dif2),imn2);
        boundBeg = boundaryPoints(yCordBack(j2),:);
        
        % Plot the selected boundary points
        plot( boundaryPoints(yCordBack(j2):yCordButt(j),2), ...
            boundaryPoints(yCordBack(j2):yCordButt(j),1), 'w', 'LineWidth', 1)
        
        % Calculated the distance of the straight line
        X = [boundBeg;boundEnd];
        d(i,1) = pdist(X,'euclidean');

        d(i,2) = length(boundaryPoints(yCordBack(j2) : yCordButt(j))); 
        endLoop = min(floor(d(i,1)),d(i,2));
    end
    
    % Determine the x value to process
    xValues = linspace(backPOI(i,2), buttPOI(i,1),endLoop);
    
    % Obtain the respective heights for each x value for the boundary
    heights2 = boundaryPoints(yCordBack(j2):yCordBack(j2)+endLoop);
    
    % Obtain the slope of the straight line
    p1 = polyfit([buttPOI(i,1) backPOI(i,2)],[buttPOI(i,2) backPOI(i,1)],1);
    
    % Put all the x values into the line function 
    heights1 = p1(1)*(xValues-backPOI(i,2))+backPOI(i,1);
    
    % Obtain the area between the two lines
    area(i) = sum(heights1(1:min(length(heights1),length(heights2)))-...
        heights2(1:min(length(heights1),length(heights2))));
    
    % Create a uicontrol of type "text" to use as a text display    
    mTextBox = uicontrol('style','text');
    set(mTextBox,'Position', [70 50 100 30],'ForegroundColor', 'r','FontSize', 20,'BackgroundColor','y');
    
    % Set threshold for warning
    warnThreshold = 1000;
    if area(i) > warnThreshold             
        set(mTextBox,'String','Warning')
        warningCount= warningCount+1;
    else
        set(mTextBox,'String','Good') 
    end
    
    % Provide score at the end of the video
    if i >= endcutoff
        
        % Calculate score based on the amount of warning messages
        score = round((1-(warningCount/(endcutoff-begcutoff)))*100);

        % Display final score
        str = [num2str(score),'%'];
        mScore = uicontrol('style','text');       
        set(mScore,'Position', [70 100 100 30],'ForegroundColor','black', ...
            'FontSize', 24,'BackgroundColor','w');                     
        set(mScore,'String',str)
     
    end

    % Write each figure to a frame in the video object   
    demoFrames = getframe;
    writeVideo(FinObj, demoFrames);
    
end

 close(FinObj);
